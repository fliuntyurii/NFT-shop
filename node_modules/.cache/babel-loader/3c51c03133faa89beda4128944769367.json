{"ast":null,"code":"import ProductList from \"./ProductList\";\nimport { connect } from 'react-redux';\nimport { setNftDataThunk, toggleModalWindow } from '../../redux/productPageReducer.tsx';\nimport React, { createRef } from \"react\"; // class ProductListContainer extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.myRef = createRef();\n//     }\n//     componentDidMount() {\n//         this.props.setNftDataThunk();\n//     }\n//     componentDidUpdate(prevProps) {\n//         this.props.setNftDataThunk();\n//     }\n//     openModalWindow = (ev) => {\n//         this.props.isModalWindow ? this.props.toggleModalWindow(false) : this.props.toggleModalWindow(true);\n//         const getId = ev.target;\n//         return finalId = getId.getAttribute('id');\n//     }\n//     insertAfter = (elem, refElem) => {\n//         return this.myRef.current.insertBefore(elem, refElem.nextSibling)\n//     }\n//     sortToLow = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (+this.myRef.current.children[i].getAttribute('data-price') > +this.myRef.current.children[n].getAttribute('data-price')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     }\n//     sortToHigh = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (+this.myRef.current.children[i].getAttribute('data-price') < +this.myRef.current.children[n].getAttribute('data-price')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     } \n//     sortByName = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (this.myRef.current.children[i].getAttribute('data-name') > this.myRef.current.children[n].getAttribute('data-name')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     }\n//     render() {\n//         return (\n//             <ProductList sortByName={this.sortByName} \n//                 sortToLow={this.sortToLow} \n//                 sortToHigh={this.sortToHigh} myRef={this.myRef} \n//                 nft={this.props.nft} \n//                 isFetching={this.props.isFetching}\n//                 openModalWindow={this.openModalWindow}\n//             />\n//         )\n//     }\n// }\n\nconst mapStateToProps = state => {\n  return {\n    nft: state.productPage.nft,\n    isFetching: state.productPage.isFetching,\n    isModalWindow: state.productPage.isModalWindow\n  };\n};\n\nexport let finalId;\nexport default connect(mapStateToProps, {\n  setNftDataThunk,\n  toggleModalWindow\n})(ProductListContainer);","map":{"version":3,"sources":["/home/yuriifliunt/Загальне/projects/NFT-shop/src/components/ProductList/ProductListContainer.jsx"],"names":["ProductList","connect","setNftDataThunk","toggleModalWindow","React","createRef","mapStateToProps","state","nft","productPage","isFetching","isModalWindow","finalId","ProductListContainer"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,oCAAnD;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,GAAG,EAAED,KAAK,CAACE,WAAN,CAAkBD,GADpB;AAEHE,IAAAA,UAAU,EAAEH,KAAK,CAACE,WAAN,CAAkBC,UAF3B;AAGHC,IAAAA,aAAa,EAAEJ,KAAK,CAACE,WAAN,CAAkBE;AAH9B,GAAP;AAKH,CAND;;AAQA,OAAO,IAAIC,OAAJ;AAEP,eAAeX,OAAO,CAACK,eAAD,EAAkB;AAAEJ,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,CAAlB,CAAP,CAAiEU,oBAAjE,CAAf","sourcesContent":["import ProductList from \"./ProductList\";\nimport { connect } from 'react-redux';\nimport { setNftDataThunk, toggleModalWindow } from '../../redux/productPageReducer.tsx';\nimport React, { createRef } from \"react\";\n\n// class ProductListContainer extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.myRef = createRef();\n//     }\n\n//     componentDidMount() {\n//         this.props.setNftDataThunk();\n//     }\n\n//     componentDidUpdate(prevProps) {\n//         this.props.setNftDataThunk();\n//     }\n\n//     openModalWindow = (ev) => {\n//         this.props.isModalWindow ? this.props.toggleModalWindow(false) : this.props.toggleModalWindow(true);\n//         const getId = ev.target;\n//         return finalId = getId.getAttribute('id');\n//     }\n\n\n//     insertAfter = (elem, refElem) => {\n//         return this.myRef.current.insertBefore(elem, refElem.nextSibling)\n//     }\n\n//     sortToLow = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (+this.myRef.current.children[i].getAttribute('data-price') > +this.myRef.current.children[n].getAttribute('data-price')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     }\n\n//     sortToHigh = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (+this.myRef.current.children[i].getAttribute('data-price') < +this.myRef.current.children[n].getAttribute('data-price')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     } \n\n//     sortByName = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (this.myRef.current.children[i].getAttribute('data-name') > this.myRef.current.children[n].getAttribute('data-name')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     }\n//     render() {\n//         return (\n//             <ProductList sortByName={this.sortByName} \n//                 sortToLow={this.sortToLow} \n//                 sortToHigh={this.sortToHigh} myRef={this.myRef} \n//                 nft={this.props.nft} \n//                 isFetching={this.props.isFetching}\n//                 openModalWindow={this.openModalWindow}\n//             />\n//         )\n//     }\n// }\n\nconst mapStateToProps = (state) => {\n    return {\n        nft: state.productPage.nft,\n        isFetching: state.productPage.isFetching,\n        isModalWindow: state.productPage.isModalWindow\n    }\n}\n\nexport let finalId;\n\nexport default connect(mapStateToProps, { setNftDataThunk, toggleModalWindow })(ProductListContainer);"]},"metadata":{},"sourceType":"module"}