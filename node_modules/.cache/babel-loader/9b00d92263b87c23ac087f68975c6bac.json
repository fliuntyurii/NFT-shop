{"ast":null,"code":"const initialState = {\n  nft: [],\n  isFetching: false\n};\n\nconst productPageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type = 'SET-NFT-DATA') {\n    return { ...state,\n      nft: action.nft\n    };\n  }\n\n  if (action.type === 'FETCHING-SWITCHER') {\n    return { ...state,\n      isFetching: action.isFetching\n    };\n  }\n\n  return state;\n};\n\nexport const setNftData = nft => ({\n  type: 'SET-NFT-DATA',\n  nft\n});\nexport const isFetchingCreactor = isFetching => ({\n  type: 'FETCHING-SWITCHER',\n  isFetching\n});\nexport default productPageReducer;\nexport const setNftDataThunk = () => dispatch => {\n  isFetchingCreactor(true);\n  fetch('http://localhost:8000/Products', {\n    method: 'GET'\n  }).then(response => response.json()).then(data => {\n    dispatch(setNftData(data));\n  });\n};","map":{"version":3,"sources":["/home/yuriifliunt/Загальне/projects/my-app/src/redux/productPageReducer.jsx"],"names":["initialState","nft","isFetching","productPageReducer","state","action","type","setNftData","isFetchingCreactor","setNftDataThunk","dispatch","fetch","method","then","response","json","data"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,GAAG,EAAE,EADY;AAEjBC,EAAAA,UAAU,EAAE;AAFK,CAArB;;AAKA,MAAMC,kBAAkB,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACzD,MAAIA,MAAM,CAACC,IAAP,GAAc,cAAlB,EAAkC;AAC9B,WAAO,EACH,GAAGF,KADA;AAEHH,MAAAA,GAAG,EAAEI,MAAM,CAACJ;AAFT,KAAP;AAIH;;AAED,MAAII,MAAM,CAACC,IAAP,KAAgB,mBAApB,EAAyC;AACrC,WAAO,EACH,GAAGF,KADA;AAEHF,MAAAA,UAAU,EAAEG,MAAM,CAACH;AAFhB,KAAP;AAIH;;AAED,SAAOE,KAAP;AACH,CAhBD;;AAkBA,OAAO,MAAMG,UAAU,GAAIN,GAAD,KAAU;AAACK,EAAAA,IAAI,EAAE,cAAP;AAAuBL,EAAAA;AAAvB,CAAV,CAAnB;AAEP,OAAO,MAAMO,kBAAkB,GAAIN,UAAD,KAAiB;AAACI,EAAAA,IAAI,EAAE,mBAAP;AAA4BJ,EAAAA;AAA5B,CAAjB,CAA3B;AAEP,eAAeC,kBAAf;AAEA,OAAO,MAAMM,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/CF,EAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAG,EAAAA,KAAK,CAAC,gCAAD,EAAmC;AAACC,IAAAA,MAAM,EAAE;AAAT,GAAnC,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACVN,IAAAA,QAAQ,CAACH,UAAU,CAACS,IAAD,CAAX,CAAR;AACH,GAJL;AAKH,CAPM","sourcesContent":["const initialState = {\n    nft: [],\n    isFetching: false\n}\n\nconst productPageReducer = (state = initialState, action) => {\n    if (action.type = 'SET-NFT-DATA') {\n        return {\n            ...state,\n            nft: action.nft\n        }\n    }\n\n    if (action.type === 'FETCHING-SWITCHER') {\n        return {\n            ...state,\n            isFetching: action.isFetching\n        }\n    }\n\n    return state;\n}\n\nexport const setNftData = (nft) => ({type: 'SET-NFT-DATA', nft})\n\nexport const isFetchingCreactor = (isFetching) => ({type: 'FETCHING-SWITCHER', isFetching});\n\nexport default productPageReducer;\n\nexport const setNftDataThunk = () => (dispatch) => {\n    isFetchingCreactor(true)\n    fetch('http://localhost:8000/Products', {method: 'GET'})\n        .then(response => response.json())\n        .then(data => {\n            dispatch(setNftData(data))\n        })\n}"]},"metadata":{},"sourceType":"module"}