{"ast":null,"code":"import _slicedToArray from\"/home/yuriifliunt/\\u0417\\u0430\\u0433\\u0430\\u043B\\u044C\\u043D\\u0435/projects/NFT-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import ProductPage from\"./ProductPage\";import{connect}from'react-redux';import{useState}from\"react\";import{toggleModalWindow,baseUrl}from\"../../redux/productPageReducer.tsx\";import{setNftData,setNftDataThunk}from\"../../redux/productPageReducer.tsx\";import{jsx as _jsx}from\"react/jsx-runtime\";var ProductPageContainer=function ProductPageContainer(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),confirmDelete=_useState2[0],setconfirmDelete=_useState2[1];var closeModalWindow=function closeModalWindow(){props.isModalWindow?props.toggleModalWindow(false):props.toggleModalWindow(true);confirmDelete&&setconfirmDelete(false);};var confirmWindow=function confirmWindow(){confirmDelete?setconfirmDelete(false):setconfirmDelete(true);};var deleteNft=function deleteNft(ev){var id=ev.target.getAttribute('id');fetch(\"\".concat(baseUrl).concat(id),{method:'DELETE'}).then(function(response){return response.json();}).then(function(data){return data;});confirmDelete?setconfirmDelete(false):setconfirmDelete(true);props.setNftDataThunk();props.toggleModalWindow(false);};return/*#__PURE__*/_jsx(\"div\",{children:props.isModalWindow?/*#__PURE__*/_jsx(ProductPage,{deleteNft:deleteNft,nft:props.nft,closeModalWindow:closeModalWindow,confirmWindow:confirmWindow,confirmDelete:confirmDelete}):null});};var mapStateToProps=function mapStateToProps(state){return{isModalWindow:state.productPage.isModalWindow,nft:state.productPage.nft};};export default connect(mapStateToProps,{setNftData:setNftData,toggleModalWindow:toggleModalWindow,setNftDataThunk:setNftDataThunk})(ProductPageContainer);","map":{"version":3,"sources":["/home/yuriifliunt/Загальне/projects/NFT-shop/src/components/ProductPage/ProductPageContainer.jsx"],"names":["ProductPage","connect","useState","toggleModalWindow","baseUrl","setNftData","setNftDataThunk","ProductPageContainer","props","confirmDelete","setconfirmDelete","closeModalWindow","isModalWindow","confirmWindow","deleteNft","ev","id","target","getAttribute","fetch","method","then","response","json","data","nft","mapStateToProps","state","productPage"],"mappings":"0KAAA,MAAOA,CAAAA,WAAP,KAAwB,eAAxB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,QAAT,KAAyB,OAAzB,CACA,OAASC,iBAAT,CAA4BC,OAA5B,KAA2C,oCAA3C,CACA,OAASC,UAAT,CAAqBC,eAArB,KAA4C,oCAA5C,C,2CAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,KAAD,CAAW,CAEpC,cAA0CN,QAAQ,CAAC,KAAD,CAAlD,wCAAOO,aAAP,eAAsBC,gBAAtB,eAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC3BH,KAAK,CAACI,aAAN,CAAsBJ,KAAK,CAACL,iBAAN,CAAwB,KAAxB,CAAtB,CAAuDK,KAAK,CAACL,iBAAN,CAAwB,IAAxB,CAAvD,CACAM,aAAa,EAAIC,gBAAgB,CAAC,KAAD,CAAjC,CACH,CAHD,CAKA,GAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxBJ,aAAa,CAAGC,gBAAgB,CAAC,KAAD,CAAnB,CAA6BA,gBAAgB,CAAC,IAAD,CAA1D,CACH,CAFD,CAIA,GAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,EAAD,CAAQ,CACtB,GAAMC,CAAAA,EAAE,CAAGD,EAAE,CAACE,MAAH,CAAUC,YAAV,CAAuB,IAAvB,CAAX,CAEAC,KAAK,WAAIf,OAAJ,SAAcY,EAAd,EAAoB,CACrBI,MAAM,CAAE,QADa,CAApB,CAAL,CAGCC,IAHD,CAGM,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EAHd,EAICF,IAJD,CAIM,SAAAG,IAAI,QAAIA,CAAAA,IAAJ,EAJV,EAKAf,aAAa,CAAGC,gBAAgB,CAAC,KAAD,CAAnB,CAA6BA,gBAAgB,CAAC,IAAD,CAA1D,CACAF,KAAK,CAACF,eAAN,GAEAE,KAAK,CAACL,iBAAN,CAAwB,KAAxB,EACH,CAZD,CAcA,mBACI,qBACKK,KAAK,CAACI,aAAN,cACG,KAAC,WAAD,EACI,SAAS,CAAEE,SADf,CAEI,GAAG,CAAEN,KAAK,CAACiB,GAFf,CAGI,gBAAgB,CAAEd,gBAHtB,CAII,aAAa,CAAEE,aAJnB,CAKI,aAAa,CAAEJ,aALnB,EADH,CAQD,IATJ,EADJ,CAaH,CAxCD,CA0CA,GAAMiB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAW,CAC/B,MAAO,CACHf,aAAa,CAAEe,KAAK,CAACC,WAAN,CAAkBhB,aAD9B,CAEHa,GAAG,CAAEE,KAAK,CAACC,WAAN,CAAkBH,GAFpB,CAAP,CAIH,CALD,CAOA,cAAexB,CAAAA,OAAO,CAACyB,eAAD,CAAkB,CAAErB,UAAU,CAAVA,UAAF,CAAcF,iBAAiB,CAAjBA,iBAAd,CAAiCG,eAAe,CAAfA,eAAjC,CAAlB,CAAP,CAA6EC,oBAA7E,CAAf","sourcesContent":["import ProductPage from \"./ProductPage\"\nimport { connect } from 'react-redux';\nimport { useState } from \"react\";\nimport { toggleModalWindow, baseUrl } from \"../../redux/productPageReducer.tsx\";\nimport { setNftData, setNftDataThunk } from \"../../redux/productPageReducer.tsx\";\n\nconst ProductPageContainer = (props) => {\n\n    const [confirmDelete, setconfirmDelete] = useState(false);\n\n    const closeModalWindow = () => {\n        props.isModalWindow ? props.toggleModalWindow(false) : props.toggleModalWindow(true);\n        confirmDelete && setconfirmDelete(false)\n    }\n\n    const confirmWindow = () => {\n        confirmDelete ? setconfirmDelete(false) : setconfirmDelete(true);\n    }\n    \n    const deleteNft = (ev) => {\n        const id = ev.target.getAttribute('id');\n        \n        fetch(`${baseUrl}${id}`, { \n            method: 'DELETE'\n        })\n        .then(response => response.json())\n        .then(data => data);\n        confirmDelete ? setconfirmDelete(false) : setconfirmDelete(true);\n        props.setNftDataThunk();\n        \n        props.toggleModalWindow(false);     \n    }\n    \n    return (\n        <div>\n            {props.isModalWindow ? \n                <ProductPage \n                    deleteNft={deleteNft}\n                    nft={props.nft} \n                    closeModalWindow={closeModalWindow} \n                    confirmWindow={confirmWindow}\n                    confirmDelete={confirmDelete}\n                /> : \n            null}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isModalWindow: state.productPage.isModalWindow,\n        nft: state.productPage.nft\n    }\n}\n\nexport default connect(mapStateToProps, { setNftData, toggleModalWindow, setNftDataThunk })(ProductPageContainer);"]},"metadata":{},"sourceType":"module"}