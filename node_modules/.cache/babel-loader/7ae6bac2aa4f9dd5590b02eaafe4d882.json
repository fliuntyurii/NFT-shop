{"ast":null,"code":"var _jsxFileName = \"/home/yuriifliunt/\\u0417\\u0430\\u0433\\u0430\\u043B\\u044C\\u043D\\u0435/projects/NFT-shop/src/components/ProductList/ProductListContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport ProductList from \"./ProductList\";\nimport { connect } from 'react-redux';\nimport { setNftDataThunk, toggleModalWindow } from '../../redux/productPageReducer.tsx';\nimport React, { createRef, useRef, useEffect } from \"react\"; // class ProductListContainer extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.myRef = createRef();\n//     }\n//     componentDidMount() {\n//         this.props.setNftDataThunk();\n//     }\n//     componentDidUpdate(prevProps) {\n//         this.props.setNftDataThunk();\n//     }\n//     openModalWindow = (ev) => {\n//         this.props.isModalWindow ? this.props.toggleModalWindow(false) : this.props.toggleModalWindow(true);\n//         const getId = ev.target;\n//         return finalId = getId.getAttribute('id');\n//     }\n//     insertAfter = (elem, refElem) => {\n//         return this.myRef.current.insertBefore(elem, refElem.nextSibling)\n//     }\n//     sortToLow = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (+this.myRef.current.children[i].getAttribute('data-price') > +this.myRef.current.children[n].getAttribute('data-price')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     }\n//     sortToHigh = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (+this.myRef.current.children[i].getAttribute('data-price') < +this.myRef.current.children[n].getAttribute('data-price')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     } \n//     sortByName = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (this.myRef.current.children[i].getAttribute('data-name') > this.myRef.current.children[n].getAttribute('data-name')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     }\n//     render() {\n//         return (\n//             <ProductList sortByName={this.sortByName} \n//                 sortToLow={this.sortToLow} \n//                 sortToHigh={this.sortToHigh} myRef={this.myRef} \n//                 nft={this.props.nft} \n//                 isFetching={this.props.isFetching}\n//                 openModalWindow={this.openModalWindow}\n//             />\n//         )\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductListContainer = props => {\n  _s();\n\n  const myRef = useRef();\n  useEffect(() => {\n    props.setNftDataThunk();\n  }, [props]);\n\n  const openModalWindow = ev => {\n    props.isModalWindow ? props.toggleModalWindow(false) : props.toggleModalWindow(true);\n    const getId = ev.target;\n    return finalId = getId.getAttribute('id');\n  };\n\n  const insertAfter = (elem, refElem) => {\n    return myRef.current.insertBefore(elem, refElem.nextSibling);\n  };\n\n  const sortToLow = () => {\n    for (let i = 0; i < myRef.current.children.length; i++) {\n      for (let n = i; n < myRef.current.children.length; n++) {\n        if (+myRef.current.children[i].getAttribute('data-price') > +myRef.current.children[n].getAttribute('data-price')) {\n          let replaceNode = myRef.current.replaceChild(myRef.current.children[n], myRef.current.children[i]);\n          insertAfter(replaceNode, myRef.current.children[i]);\n        }\n      }\n    }\n  };\n\n  const sortToHigh = () => {\n    for (let i = 0; i < myRef.current.children.length; i++) {\n      for (let n = i; n < myRef.current.children.length; n++) {\n        if (+myRef.current.children[i].getAttribute('data-price') < +myRef.current.children[n].getAttribute('data-price')) {\n          let replaceNode = myRef.current.replaceChild(myRef.current.children[n], myRef.current.children[i]);\n          insertAfter(replaceNode, myRef.current.children[i]);\n        }\n      }\n    }\n  };\n\n  const sortByName = () => {\n    for (let i = 0; i < myRef.current.children.length; i++) {\n      for (let n = i; n < myRef.current.children.length; n++) {\n        if (myRef.current.children[i].getAttribute('data-name') > myRef.current.children[n].getAttribute('data-name')) {\n          let replaceNode = myRef.current.replaceChild(myRef.current.children[n], myRef.current.children[i]);\n          insertAfter(replaceNode, myRef.current.children[i]);\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProductList, {\n    sortByName: sortByName,\n    sortToLow: sortToLow,\n    sortToHigh: sortToHigh,\n    myRef: myRef,\n    nft: props.nft,\n    isFetching: props.isFetching,\n    openModalWindow: openModalWindow\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProductListContainer, \"q2ppNrvms5kW2WRaEHDe9gJ2smw=\");\n\n_c = ProductListContainer;\n\nconst mapStateToProps = state => {\n  return {\n    nft: state.productPage.nft,\n    isFetching: state.productPage.isFetching,\n    isModalWindow: state.productPage.isModalWindow\n  };\n};\n\nexport let finalId;\nexport default connect(mapStateToProps, {\n  setNftDataThunk,\n  toggleModalWindow\n})(ProductListContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductListContainer\");","map":{"version":3,"sources":["/home/yuriifliunt/Загальне/projects/NFT-shop/src/components/ProductList/ProductListContainer.jsx"],"names":["ProductList","connect","setNftDataThunk","toggleModalWindow","React","createRef","useRef","useEffect","ProductListContainer","props","myRef","openModalWindow","ev","isModalWindow","getId","target","finalId","getAttribute","insertAfter","elem","refElem","current","insertBefore","nextSibling","sortToLow","i","children","length","n","replaceNode","replaceChild","sortToHigh","sortByName","nft","isFetching","mapStateToProps","state","productPage"],"mappings":"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","sourcesContent":["import ProductList from \"./ProductList\";\nimport { connect } from 'react-redux';\nimport { setNftDataThunk, toggleModalWindow } from '../../redux/productPageReducer.tsx';\nimport React, { createRef, useRef, useEffect } from \"react\";\n\n// class ProductListContainer extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.myRef = createRef();\n//     }\n\n//     componentDidMount() {\n//         this.props.setNftDataThunk();\n//     }\n\n//     componentDidUpdate(prevProps) {\n//         this.props.setNftDataThunk();\n//     }\n\n//     openModalWindow = (ev) => {\n//         this.props.isModalWindow ? this.props.toggleModalWindow(false) : this.props.toggleModalWindow(true);\n//         const getId = ev.target;\n//         return finalId = getId.getAttribute('id');\n//     }\n\n\n//     insertAfter = (elem, refElem) => {\n//         return this.myRef.current.insertBefore(elem, refElem.nextSibling)\n//     }\n\n//     sortToLow = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (+this.myRef.current.children[i].getAttribute('data-price') > +this.myRef.current.children[n].getAttribute('data-price')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     }\n\n//     sortToHigh = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (+this.myRef.current.children[i].getAttribute('data-price') < +this.myRef.current.children[n].getAttribute('data-price')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     } \n\n//     sortByName = () => {\n//         for (let i = 0; i < this.myRef.current.children.length; i++) {\n//             for (let n = i; n < this.myRef.current.children.length; n++) {\n//                 if (this.myRef.current.children[i].getAttribute('data-name') > this.myRef.current.children[n].getAttribute('data-name')) {\n//                     let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n//                     this.insertAfter(replaceNode, this.myRef.current.children[i]);\n//                 }\n//             }\n//         }\n//     }\n//     render() {\n//         return (\n//             <ProductList sortByName={this.sortByName} \n//                 sortToLow={this.sortToLow} \n//                 sortToHigh={this.sortToHigh} myRef={this.myRef} \n//                 nft={this.props.nft} \n//                 isFetching={this.props.isFetching}\n//                 openModalWindow={this.openModalWindow}\n//             />\n//         )\n//     }\n// }\n\nconst ProductListContainer = (props) => {\n    const myRef = useRef();\n\n    useEffect(() => {\n        props.setNftDataThunk();\n    }, [props])\n\n    const openModalWindow = (ev) => {\n        props.isModalWindow ? props.toggleModalWindow(false) : props.toggleModalWindow(true);\n        const getId = ev.target;\n        return finalId = getId.getAttribute('id');\n    }\n\n\n    const insertAfter = (elem, refElem) => {\n        return myRef.current.insertBefore(elem, refElem.nextSibling)\n    }\n\n    const sortToLow = () => {\n        for (let i = 0; i < myRef.current.children.length; i++) {\n            for (let n = i; n < myRef.current.children.length; n++) {\n                if (+myRef.current.children[i].getAttribute('data-price') > +myRef.current.children[n].getAttribute('data-price')) {\n                    let replaceNode = myRef.current.replaceChild(myRef.current.children[n], myRef.current.children[i]);\n                    insertAfter(replaceNode, myRef.current.children[i]);\n                }\n            }\n        }\n    }\n\n    const sortToHigh = () => {\n        for (let i = 0; i < myRef.current.children.length; i++) {\n            for (let n = i; n < myRef.current.children.length; n++) {\n                if (+myRef.current.children[i].getAttribute('data-price') < +myRef.current.children[n].getAttribute('data-price')) {\n                    let replaceNode = myRef.current.replaceChild(myRef.current.children[n], myRef.current.children[i]);\n                    insertAfter(replaceNode, myRef.current.children[i]);\n                }\n            }\n        }\n    } \n\n    const sortByName = () => {\n        for (let i = 0; i < myRef.current.children.length; i++) {\n            for (let n = i; n < myRef.current.children.length; n++) {\n                if (myRef.current.children[i].getAttribute('data-name') > myRef.current.children[n].getAttribute('data-name')) {\n                    let replaceNode = myRef.current.replaceChild(myRef.current.children[n], myRef.current.children[i]);\n                    insertAfter(replaceNode, myRef.current.children[i]);\n                }\n            }\n        }\n    }\n    return (\n        <ProductList sortByName={sortByName} \n            sortToLow={sortToLow} \n            sortToHigh={sortToHigh} myRef={myRef} \n            nft={props.nft} \n            isFetching={props.isFetching}\n            openModalWindow={openModalWindow}\n        />\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        nft: state.productPage.nft,\n        isFetching: state.productPage.isFetching,\n        isModalWindow: state.productPage.isModalWindow\n    }\n}\n\nexport let finalId;\n\nexport default connect(mapStateToProps, { setNftDataThunk, toggleModalWindow })(ProductListContainer);"]},"metadata":{},"sourceType":"module"}