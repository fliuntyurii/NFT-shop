{"ast":null,"code":"var _jsxFileName = \"/home/yuriifliunt/\\u0417\\u0430\\u0433\\u0430\\u043B\\u044C\\u043D\\u0435/projects/NFT-shop/src/components/ProductList/ProductListContainer.jsx\";\nimport ProductList from \"./ProductList\";\nimport { connect } from 'react-redux';\nimport { setNftDataThunk, toggleModalWindow } from '../../redux/productPageReducer.tsx';\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProductListContainer extends React.Component {\n  constructor(props) {\n    // super(props);\n    this.myRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.setNftDataThunk();\n    console.log(this.props.isModalWindow);\n  }\n\n  openModalWindow() {\n    this.props.isModalWindow ? this.props.toggleModalWindow(true) : this.props.toggleModalWindow(false);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(ProductList, {\n      sortByName: this.sortByName,\n      sortToLow: this.sortToLow,\n      sortToHigh: this.sortToHigh,\n      myRef: this.myRef,\n      nft: this.props.nft,\n      isFetching: this.props.isFetching,\n      openModalWindow: this.openModalWindow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    nft: state.productPage.nft,\n    isFetching: state.productPage.isFetching,\n    isModalWindow: state.productPage.isModalWindow\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setNftDataThunk,\n  toggleModalWindow\n})(ProductListContainer);","map":{"version":3,"sources":["/home/yuriifliunt/Загальне/projects/NFT-shop/src/components/ProductList/ProductListContainer.jsx"],"names":["ProductList","connect","setNftDataThunk","toggleModalWindow","React","ProductListContainer","Component","constructor","props","myRef","createRef","componentDidMount","console","log","isModalWindow","openModalWindow","render","sortByName","sortToLow","sortToHigh","nft","isFetching","mapStateToProps","state","productPage"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,oCAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,oBAAN,SAAmCD,KAAK,CAACE,SAAzC,CAAmD;AAE/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA,SAAKC,KAAL,gBAAaL,KAAK,CAACM,SAAN,EAAb;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKH,KAAL,CAAWN,eAAX;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWM,aAAvB;AACH;;AAEDC,EAAAA,eAAe,GAAG;AACd,SAAKP,KAAL,CAAWM,aAAX,GAA2B,KAAKN,KAAL,CAAWL,iBAAX,CAA6B,IAA7B,CAA3B,GAAgE,KAAKK,KAAL,CAAWL,iBAAX,CAA6B,KAA7B,CAAhE;AACH;;AAwCDa,EAAAA,MAAM,GAAG;AAEL,wBACI,QAAC,WAAD;AAAa,MAAA,UAAU,EAAE,KAAKC,UAA9B;AACI,MAAA,SAAS,EAAE,KAAKC,SADpB;AAEI,MAAA,UAAU,EAAE,KAAKC,UAFrB;AAEiC,MAAA,KAAK,EAAE,KAAKV,KAF7C;AAGI,MAAA,GAAG,EAAE,KAAKD,KAAL,CAAWY,GAHpB;AAII,MAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWa,UAJ3B;AAKI,MAAA,eAAe,EAAE,KAAKN;AAL1B;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AAjE8C;;AAoEnD,MAAMO,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHH,IAAAA,GAAG,EAAEG,KAAK,CAACC,WAAN,CAAkBJ,GADpB;AAEHC,IAAAA,UAAU,EAAEE,KAAK,CAACC,WAAN,CAAkBH,UAF3B;AAGHP,IAAAA,aAAa,EAAES,KAAK,CAACC,WAAN,CAAkBV;AAH9B,GAAP;AAKH,CAND;;AAQA,eAAeb,OAAO,CAACqB,eAAD,EAAkB;AAAEpB,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,CAAlB,CAAP,CAAiEE,oBAAjE,CAAf","sourcesContent":["import ProductList from \"./ProductList\";\nimport { connect } from 'react-redux';\nimport { setNftDataThunk, toggleModalWindow } from '../../redux/productPageReducer.tsx';\nimport React from \"react\";\n\nclass ProductListContainer extends React.Component {\n\n    constructor(props) {\n        // super(props);\n        this.myRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.setNftDataThunk()\n        console.log(this.props.isModalWindow)\n    }\n\n    openModalWindow() {\n        this.props.isModalWindow ? this.props.toggleModalWindow(true) : this.props.toggleModalWindow(false);\n    }\n\n\n    insertAfter = (elem, refElem) => {\n        return this.myRef.current.insertBefore(elem, refElem.nextSibling)\n    }\n\n    sortToLow = () => {\n        for (let i = 0; i < this.myRef.current.children.length; i++) {\n            for (let n = i; n < this.myRef.current.children.length; n++) {\n                if (+this.myRef.current.children[i].getAttribute('data-price') > +this.myRef.current.children[n].getAttribute('data-price')) {\n                    let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n                    this.insertAfter(replaceNode, this.myRef.current.children[i]);\n                }\n            }\n        }\n    }\n\n    sortToHigh = () => {\n        for (let i = 0; i < this.myRef.current.children.length; i++) {\n            for (let n = i; n < this.myRef.current.children.length; n++) {\n                if (+this.myRef.current.children[i].getAttribute('data-price') < +this.myRef.current.children[n].getAttribute('data-price')) {\n                    let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n                    this.insertAfter(replaceNode, this.myRef.current.children[i]);\n                }\n            }\n        }\n    } \n\n    sortByName = () => {\n        for (let i = 0; i < this.myRef.current.children.length; i++) {\n            for (let n = i; n < this.myRef.current.children.length; n++) {\n                if (this.myRef.current.children[i].getAttribute('data-name') > this.myRef.current.children[n].getAttribute('data-name')) {\n                    let replaceNode = this.myRef.current.replaceChild(this.myRef.current.children[n], this.myRef.current.children[i]);\n                    this.insertAfter(replaceNode, this.myRef.current.children[i]);\n                }\n            }\n        }\n    }\n\n    render() {\n\n        return (\n            <ProductList sortByName={this.sortByName} \n                sortToLow={this.sortToLow} \n                sortToHigh={this.sortToHigh} myRef={this.myRef} \n                nft={this.props.nft} \n                isFetching={this.props.isFetching}\n                openModalWindow={this.openModalWindow}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        nft: state.productPage.nft,\n        isFetching: state.productPage.isFetching,\n        isModalWindow: state.productPage.isModalWindow\n    }\n}\n\nexport default connect(mapStateToProps, { setNftDataThunk, toggleModalWindow })(ProductListContainer);"]},"metadata":{},"sourceType":"module"}